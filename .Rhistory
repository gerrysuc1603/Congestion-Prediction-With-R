}
for(i in 0:720){
fileURL <- "https://api.tomtom.com/traffic/services/4/incidentDetails/s3/-6.259674,106.573391,-6.202251,106.696815/13/-1/xml?projection=EPSG4326&key=1J58CxRlEU2Moz8qwGxuaMqYoVpKZ7iD"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
xmldataframe <- xmlToDataFrame(doc)
if(i==0){
filterData1 <-filter(xmldataframe, !is.na(d))
filterData1$date<-format(Sys.time(),"%H-%M-%S")
write.csv(filterData, "xmldataa4.csv", row.names = FALSE)
print(filterData1)
print(i)
}
if(i>0){
temp<-filterData1
filterData1 <-filter(xmldataframe, !is.na(d))
filterData1$date<-format(Sys.time(),"%H-%M-%s")
filterData1<- rbind.all.columns(temp,filterData1)
print(filterData1)
write.csv(filterData1, "xmldataa4.csv", row.names = FALSE)
print(i)
}
Sys.sleep(120.0)
}
library(XML)
library(RCurl)
library(dplyr)
Sys.time()
tStart <- Sys.time()
rbind.all.columns <- function(x, y) {
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- NA
y[, c(as.character(x.diff))] <- NA
return(rbind(x, y))
}
for(i in 0:720){
fileURL <- "https://api.tomtom.com/traffic/services/4/incidentDetails/s3/-6.259674,106.573391,-6.202251,106.696815/13/-1/xml?projection=EPSG4326&key=1J58CxRlEU2Moz8qwGxuaMqYoVpKZ7iD"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
xmldataframe <- xmlToDataFrame(doc)
if(i==0){
filterData1 <-filter(xmldataframe, !is.na(d))
filterData1$date<-format(Sys.time(),"%H-%M-%S")
write.csv(filterData, "xmldataa4.csv", row.names = FALSE)
print(filterData1)
print(i)
}
if(i>0){
temp<-filterData1
filterData1 <-filter(xmldataframe, !is.na(d))
filterData1$date<-format(Sys.time(),"%H-%M-%s")
filterData1<- rbind.all.columns(temp,filterData1)
print(filterData1)
write.csv(filterData1, "xmldataa4.csv", row.names = FALSE)
print(i)
}
Sys.sleep(60.0)
}
View(filterData1)
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
xy$l <- as.numeric(as.character(xy$l))
xy$dl <- as.numeric(as.character(xy$dl))
xy$date <- as.POSIXct(xy$date)
xy$date <- as.POSIXct(xy$Date)
# Apply the lm() function.
relation <- lm(dl~l~Date,data = xy)
# Apply the lm() function.
relation <- lm(dl~l~Date,data = xy,drop.unused.levels = TRUE)
# Apply the lm() function.
relation <- lm(dl~l+Date,data = xy,)
print(summary(relation))
# Find weight of a person with height 170.
a <- data.frame(Date = "20-07-2018 17-60-1532170732")
result <-  predict(relation,a)
# Find weight of a person with height 170.
a <- data.frame(Date = "20-07-2018 17-60-1532170732",l=2500)
result <-  predict(relation,a)
# Find weight of a person with height 170.
a <- data.frame(Date = "20-07-2018 17-58-1532170732",l=2500)
result <-  predict(relation,a)
print(result)
# Apply the lm() function.
relation <- lm(dl~l,data = xy,)
result <-  predict(relation,a,interval = "confidence")
print(result)
str(Sys.time())
unclass("2018-07-24 08:06:54")
unclass(str(Sys.time()))
Sys.time()
unclass("2018-07-24 08:10:17 +07")
as.numeric("2018-07-24 08:10:17 +07")
xa<-"2018-07-24 08:10:17 +07"
xa<-as.POSIXct.numeric(xa)
xa<-as.POSIXct.numeric(xa,origin = 2018-07-24)
xa<-as.POSIXct(xa)
xa<-as.numeric(xa)
xa
gsub("\\a.b", "", "a.bc")
gsub("\\a.b", " ", "a.bc")
gsub("\\a", "_", "a.bc")
gsub("\\.", "_", "a.bc")
library(tidyr)
install.packages("library(tidyr)")
library(tidyr)
filterData <- filterData %>%separate(Date, c("Date", "Time"), " ")
install.packages("tidyr")
library(tidyr)
filterData <- filterData %>%separate(Date, c("Date", "Time"), " ")
filterData$Date<-c()
filterData$Time <-paste("2018-07-20",filterData$Time,sep = " ")
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
xy$l <- as.numeric(as.character(xy$l))
xy$dl <- as.numeric(as.character(xy$dl))
xy$Date <- as.POSIXct(xy$Date)
xy$Time <- as.POSIXct(xy$Time)
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
xy$l <- as.numeric(as.character(xy$l))
xy$dl <- as.numeric(as.character(xy$dl))
xy$Time <- as.POSIXlt(xy$Time)
xy$Time
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
xy$Time
xy$Time <- as.POSIXct(xy$Time, format="%d/%m/%Y %H:%M:%S")
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
as.POSIXct(xy$Time, format="%y/%m/%d %H:%M:%S")
as.POSIXct(xy$Time, format="%y-%m-%d %H:%M:%S")
xy$Time
as.numeric(xy$Time)
strptime(xy$Time, "%m/%d/%y %H:%M:%S")
strptime(x, "%m-%d-%y %H:%M:%S")
as.POSIXct(xy$Time)
as.POSIXlt(xy$Time)
as.POSIXlt(xy$Time, tz = "", format,
tryFormats = c("%Y-%m-%d %H:%M:%OS",
"%Y/%m/%d %H:%M:%OS",
"%Y-%m-%d %H:%M",
"%Y/%m/%d %H:%M",
"%Y-%m-%d",
"%Y/%m/%d"))
as.POSIXlt(xy$Time, tz = "", format, tryFormats = c("%Y-%m-%d %H:%M:%OS",      "%Y/%m/%d %H:%M:%OS",
"%Y-%m-%d %H:%M",
"%Y/%m/%d %H:%M",
"%Y-%m-%d",
"%Y/%m/%d"))
as.POSIXct(xy$Time, format="%Y-%m-%d %H:%M:%OS")
as.POSIXct(xy$Time, format="%H:%M:%OS")
as.POSIXct(xy$Time, format="%Y-%m-%d")
as.POSIXct(xy$Time, format="%Y-%m-%d %H:%M:%OS")
as.POSIXct("2018-07-20 09-07-1532138823", format="%Y-%m-%d %H:%M:%OS")
as.POSIXct("2018-07-20 09-07-1532138823", format="%Y-%m-%d")
as.POSIXct("2018-07-2009-07-1532138823", format="%Y-%m-%d %H:%M:%OS")
as.POSIXct("2018-07-2009-07-1532138823", format="%Y-%m-%d%H:%M:%OS")
as.POSIXct("2018-07-20 09-07-1532138823", format="%Y-%m-%d")
as.POSIXct("2018-07-20 09-07-15", format="%Y-%m-%d %H:%M:%OS")
as.POSIXct("2018-07-20 09-07-15", format="%Y-%m-%d %H:%M:%S")
as.POSIXct("2018-07-20 09-07-15", format="%Y-%m-%d %H-%M-%OS")
as.POSIXct("2018-07-2009-07-1532138823", format="%Y-%m-%d %H-%M-%OS")
as.POSIXct("2018-07-2009-07-1532138823", format="%Y-%m-%d %H-%M-%S")
as.POSIXct("2018-07-2009-07-1532138823", format="%Y-%m-%d %H-%M-%S")
as.POSIXct(xy$Time, format="%Y-%m-%d %H-%M-%S")
xy$Time <- as.POSIXct(xy$Time, format="%Y-%m-%d %H-%M-%S")
xy$TimeNumeric <- as.numeric(xy$Time)
# Apply the lm() function.
relation <- lm(dl~TimeNumeric,data = xy)
as.numeric(as.POSIXct("2018-07-20 17:60:15", format="%Y-%m-%d %H:%M:%S"))
as.POSIXct("2018-07-20 17:60:15", format="%Y-%m-%d %H:%M:%S")
as.POSIXct("2018-07-20 17:00:15", format="%Y-%m-%d %H:%M:%S")
as.numeric(as.POSIXct("2018-07-20 17:00:15", format="%Y-%m-%d %H:%M:%S"))
result <-  predict(relation,a)
# Find weight of a person with height 170.
a <- data.frame(TimeNumeric=1532080815)
result <-  predict(relation,a)
print(result)
# Apply the lm() function.
relation <- lm(dl~TimeNumeric,data = xy)
# Apply the lm() function.
relation <- lm(dl~TimeNumeric,data = xy)
result <-  predict(relation,a)
print(result)
result <-  predict(relation,a)
print(result)
# Apply the lm() function.
relation <- lm(dl~l+TimeNumeric,data = xy)
result <-  predict(relation,a)
# Find weight of a person with height 170.
a <- data.frame(TimeNumeric=1532080815,l=2500)
result <-  predict(relation,a)
xy$l <- as.numeric(as.character(xy$l))
xy$dl <- as.numeric(as.character(xy$dl))
result <-  predict(relation,a)
xy$l <- as.factor(as.character(xy$l))
# Apply the lm() function.
relation <- lm(dl~l+TimeNumeric,data = xy)
# Find weight of a person with height 170.
a <- data.frame(TimeNumeric=1532080815,l=2500)
result <-  predict(relation,a)
# Apply the lm() function.
relation <- lm(dl~TimeNumeric+l,data = xy)
result <-  predict(relation,a)
xy$l <- as.numeric(as.character(xy$l))
# Apply the lm() function.
relation <- lm(dl~TimeNumeric+l,data = xy)
result <-  predict(relation,a)
print(result)
# Find weight of a person with height 170.
a <- data.frame(TimeNumeric=1532080815,l=7500)
result <-  predict(relation,a)
print(result)
summary(relation)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
install.packages("rworldmap")
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
xy <- xy %>%separate(p, c("latitude", "longitude"), "-")
paste("A", 1, "%")
paste0("A", 1, "%")
paste0("-", xy$longitude)
xy$longitude<-paste0("-", xy$longitude)
xy$latitude<-as.numeric(xy$latitude)
xy$longitude<-as.numeric(xy$longitude)
points(xy$longitude, xy$latitude, col = "red", cex = .6)
points(xy$latitude, xy$longitude, col = "red", cex = .6)
points(xy$latitude, xy$longitude, col = "red", cex = .6)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
points(xy$latitude, xy$longitude, col = "red", cex = .6)
map <- get_map(location = 'Indonesia', zoom = 4)
library(ggmap)
map <- get_map(location = 'Indonesia', zoom = 4)
install.packages("ggmap")
library(ggmap)
map <- get_map(location = 'Indonesia', zoom = 4)
View(map)
mapPoints <- ggmap(map) + geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
mapPoints <- ggmap(map) + geom_point(aes(x = xy$latitude, y = xy$longitude, size = sqrt(flights)), data = xy, alpha = .5)
mapPoints
mapPoints <- ggmap(map) + geom_point(aes(x = xy$latitude, y = xy$longitude, size = sqrt(dl)), data = xy, alpha = .5)
mapPoints
map <- get_map(location = 'Indonesia', zoom = 13)
mapPoints <- ggmap(map) + geom_point(aes(x = xy$latitude, y = xy$longitude, size = sqrt(dl)), data = xy, alpha = .5)
mapPoints
map <- get_map(location = 'Indonesia', zoom = 10)
mapPoints <- ggmap(map) + geom_point(aes(x = xy$latitude, y = xy$longitude, size = sqrt(dl)), data = xy, alpha = .5)
mapPoints
map <- get_map(location = 'Jakarta', zoom =7 )
mapPoints <- ggmap(map) + geom_point(aes(x = xy$latitude, y = xy$longitude, size = sqrt(dl)), data = xy, alpha = .5)
mapPoints
map <- get_map(location = 'Jakarta', zoom =11 )
mapPoints <- ggmap(map) + geom_point(aes(x = xy$latitude, y = xy$longitude, size = sqrt(dl)), data = xy, alpha = .5)
mapPoints
mapPoints <- ggmap(map) + geom_point(aes(x = xy$latitude, y = xy$longitude, size = sqrt(dl)), data = xy, alpha = .5)
map <- get_map(location = 'Tangerang', zoom =13 )
mapPoints <- ggmap(map) + geom_point(aes(x = xy$latitude, y = xy$longitude, size = sqrt(dl)), data = xy, alpha = .5)
mapPoints
# Find weight of a person with height 170.
a <- data.frame(TimeNumeric=1532080815)
# Apply the lm() function.
relation <- lm(l~TimeNumeric,data = xy)
result <-  predict(relation,a)
print(result)
tempLenght<- result
# Apply the lm() function.
relation <- lm(dl~l+TimeNumeric,data = xy)
# Find weight of a person with height 170.
a <- data.frame(l=tempLenght,TimeNumeric=1532080815)
result <-  predict(relation,a)
print(result)
xy$id<-c()
xy$latitude<-()
xy$latitude<-c()
xy$longitude<-c()
xy$ic<-c()
xy$ty<-c()
xy$FromTo<-paste(xy$f,xy$t,sep = "-")
xy$f<-c()
xy$t<-c()
xy$TimeNumeric<-c()
View(filterData)
View(filterData)
filterData <- filterData %>%separate(p, c("latitude", "longitude"), "-")
xy$longitude<-paste0("-", xy$longitude)
filterData$longitude<-paste0("-", filterData$longitude)
filterData$latitude<-as.numeric(filterData$latitude)
filterData$longitude<-as.numeric(filterData$longitude)
map <- get_map(location = 'Jakarta Utara', zoom =13 )
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
filterData$dl<-as.numeric(filterData$dl)
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
library(ggmap)
map <- get_map(location = 'Tangerang', zoom =12 )
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
map <- get_map(location = 'Tangerang', zoom =13 )
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
map <- get_map(location = 'Tangerang', zoom =13 )
map <- get_map(location = 'jakarta', zoom =13 )
map <- get_map(location = 'tangerang', zoom =13 )
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
map <- get_map(location = 'jakarta', zoom =13 )
mapPoints
map <- get_map(location = 'jakarta', zoom =12 )
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
map <- get_map(location = 'tangerang', zoom =12 )
map <- get_map(location = 'alam sutera', zoom =12 )
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
map <- get_map(location = 'alam sutera', zoom =13 )
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
map <- get_map(location = 'tangerang', zoom =13 )
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
map <- get_map(location = 'tangerang', zoom =11 )
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
map <- get_map(location = 'tangerang', zoom =12 )
xy$longitude<-c()
xy$l <- as.numeric(as.character(xy$l))
xy$dl <- as.numeric(as.character(xy$dl))
xy$Time <- as.factor(xy$Time)
xy$FromTo <- as.factor(xy$FromTo)
xy$d<-as.factor(xy$d)
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
xy <- xy[,-c(1:5)]
xy$FromTo<-paste(xy$f,xy$t,sep = "-")
xy$f<-c()
xy$t<-c()
xy$l <- as.numeric(as.character(xy$l))
xy$dl <- as.numeric(as.character(xy$dl))
xy$Time <- as.factor(xy$Time)
xy$FromTo <- as.factor(xy$FromTo)
xy$d<-as.factor(xy$d)
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
xy$Time <- as.factor(as.character(xy$Time))
xy$FromTo <- as.factor(as.character(xy$FromTo))
xy$d<-as.factor(as.character(xy$d) )
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
# Apply the lm() function.
relation <- lm(dl~l+Time+FromTo+d,data = xy)
# Apply the lm() function.
relation <- lm(dl~l+Time+FromTo,data = xy)
# Apply the lm() function.
relation <- lm(dl~l+FromTo,data = xy)
# Apply the lm() function.
relation <- lm(dl~l+Time,data = xy)
# Apply the lm() function.
relation <- lm(dl~l+d+Time+FromTo,data = xy)
# Apply the lm() function.
relation <- lm(dl~l+d+FromTo+Time,data = xy)
# Apply the lm() function.
relation <- lm(dl~l+FromTo+Time,data = xy)
# Apply the lm() function.
relation <- lm(dl~d,data = xy)
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
xy <- xy[,-c(1:3)]
xy$FromTo<-paste(xy$f,xy$t,sep = "-")
xy$t<-c()
xy$f<-c()
xy$l <- as.numeric(as.character(xy$l))
xy$dl <- as.numeric(as.character(xy$dl))
xy$ic <- as.numeric(as.character(xy$ic))
xy$ty <- as.numeric(as.character(xy$ty))
xy$Time <- as.factor(as.character(xy$Time))
xy$FromTo <- as.factor(as.character(xy$FromTo))
xy$d<-as.factor(as.character(xy$d) )
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
column_class <- lapply(xy,class)
column_class <- column_class[column_class != "factor"]
factor_levels <- lapply(xy, nlevels)
factor_levels <- factor_levels[factor_levels > 1]
xy <- xy[,which(names(xy) %in% c(names(factor_levels), names(column_class)))]
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
summary(relation)
xy<-xy(-c[193:202],)
xy<-xy[-c(193:202),]
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
xy <- xy[-c(192),]
# Find weight of a person with height 170.
a <- data.frame(xy[c(191,)])
# Find weight of a person with height 170.
a <- data.frame(xy[c(191),)])
# Find weight of a person with height 170.
a <- data.frame(xy[c(191),])
View(a)
xy <- xy[-c(191),]
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
result <-  predict(relation,a)
a$dl<-c()
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
result <-  predict(relation,a)
View(MyData)
View(xy)
xy$Time <- as.POSIXct(as.character(xy$Time),format("%Y-%m-%d %H-%M-%S"))
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
xy <- xy[,-c(1:3)]
xy$Time <- as.POSIXct(xy$Time,format("%Y-%m-%d %H-%M-%S"))
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
remove(a)
remove(relation)
remove(result)
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
remove(xy)
# The predictor vector.
xy <-filter(filterData,f=="Tangerang [18]",t=="Karang Tengah [11]")
map <- get_map(location = 'tangerang', zoom =13 )
mapPoints <- ggmap(map) + geom_point(aes(x = filterData$latitude, y = filterData$longitude, size = sqrt(dl)), data = filterData, alpha = .5)
mapPoints
mapPoints
as.POSIXct(xy$Time,format("%Y-%m-%d %H-%M-%S"))
as.POSIXlt(xy$Time,format("%Y-%m-%d %H-%M-%S"))
as.POSIXct(xy$Time, format="%Y-%m-%d %H-%M-%S")
as.POSIXct(xy$Time,format="%Y-%m-%d %H-%M-%S")
xy<-xy[-c(193:202),]
xy <- xy[,-c(1:3)]
xy$FromTo<-paste(xy$f,xy$t,sep = "-")
# Give the chart file a name.
xy$f<-c()
# Give the chart file a name.
xy$t<-c()
xy$l <- as.numeric(as.character(xy$l))
xy$dl <- as.numeric(as.character(xy$dl))
xy$ic <- as.numeric(as.character(xy$ic))
xy$ty <- as.numeric(as.character(xy$ty))
xy$Time <- as.POSIXct(xy$Time,format="%Y-%m-%d %H-%M-%S")
xy$FromTo <- as.factor(as.character(xy$FromTo))
xy$d<-as.factor(as.character(xy$d) )
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
column_class <- lapply(xy,class)
column_class <- column_class[column_class != "factor"]
factor_levels <- lapply(xy, nlevels)
factor_levels <- factor_levels[factor_levels > 1]
xy <- xy[,which(names(xy) %in% c(names(factor_levels), names(column_class)))]
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
a <- data.frame(xy[c(192),])
View(a)
xy <- xy[-c(192),]
a$dl<-c()
# Apply the lm() function.
relation <- lm(dl~.,data = xy)
result <-  predict(relation,a)
print(result)
filterData$FromTo<-paste(filterData$f,filterData$t,sep = "-")
filterData$f<-c()
filterData$t<-c()
as.POSIXct(filterData$Time,format="%Y-%m-%d %H-%M-%S")
filterData$Time <- as.POSIXct(filterData$Time,format="%Y-%m-%d %H-%M-%S")
nrow(filterData)
remove(filterData1)
remove(MyData)
shiny::runApp()
print(summary(result))
runApp()
runApp()
runApp()
runApp()
map <- get_map(location = 'tangerang', zoom =13 )
map <- get_map(location = 'tangerang', zoom =12 )
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('shinyApps.R')
runApp('shinyApps.R')
runApp('shinyApps.R')
runApp('shinyApps.R')
runApp('shinyApps.R')
# The predictor vector.
xya <-filter(filterData,FromTo=="Tangerang [18]-Karang Tengah [11]")
runApp('shinyApps.R')
View(xya)
runApp('shinyApps.R')
runApp('shinyApps.R')
runApp('shinyApps.R')
View(a)
a$dl <- result
runApp('shinyApps.R')
